CustomList<T>.Remove(T) Method

Removes all occurences of a specific object contained in one CustomList<T>
from another CustomList<T>

Parameters
(CustomList<T> listOne, CustomList<T> listTwo)

Returns
listOne with the matching item removed. Returns the original listOne if no items match in listTwo

Implements
Remove(T item)

Examples:
//Overloading an operator requires a public and static modifier
//Parameters include two instances of a CustomList<T>
public static CustomList<T> operator -(CustomList<T> listOne, CustomList<T> listTwo)
	{         
        	foreach (T item1 in listOne)//foreach will run the logic below for every T item1 in our first list
                {                   
                    for (int i = 0; i < listTwo.count; i++)//checks every item in listOne for each index of listTwo
                    {
                    if (item1.Equals(listTwo[i])) //checks if the item from listOne is the same at each index of listTwo
                        {
                            listOne.Remove(item1); //if an item from listOne is the same as listTwo at the given index, the item is removed from listOne              
                        }
                    }
                }           
            return listOne; //returns the new listOne with the matching items removed
        }




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustomListProject
{
	class Program
	{
		static void Main(string[] args)
		{
			
            		CustomList<int> list = new CustomList<int>() { 1, 3, 5 };
            		CustomList<int> listTwo = new CustomList<int>() { 1, 4, 6 };
	    		result = list - listTwo;
		}
	}
}
	//This will return the CustomList result as { 3, 5 }, since list and listTwo
	//contain "1". The minus operator checks each item from list and compares them
	//to each index value of listTwo. If an item from list equals an index value
	//in listTwo, that specific item is removed from listOne
